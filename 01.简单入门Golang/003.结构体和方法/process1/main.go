package main

import "fmt"

func main() {
	a := 5
	b := 6

	fmt.Println("a的值", a)

	// 指针变量c存储的是变量a的内存地址
	c := &a
	fmt.Println("a的内存地址", c)

	// 指针变量不允许直接赋值,需要使用*获取引用
	// c = 4

	// 将指针变量czhixiang的内存里面的值设置为4
	*c = 4
	fmt.Println("a的值", a)

	// 指针变量c现在存储的变量b的内存地址
	c = &b
	fmt.Println("b的内存地址", c)

	// 将指针变量c指向的内存里面的值设置为8
	*c = 8
	fmt.Println("a的值", a)
	fmt.Println("b的值", b)

	// 把指针变量c赋予c1,c1是一个引用变量,存的只是指针地址,他们两个现在是独立的了
	c1 := c
	fmt.Println("c的内存地址", c)
	fmt.Println("c1的内存地址", c1)

	// 将指针变量c指向的内存里面的值设置为9
	*c = 9
	fmt.Println("c指向的内存地址的值", *c)
	fmt.Println("c1指向的内存地址的值", *c1)

	// 指针变量c现在存储的是变量a的内存地址,但c1还是不变
	c = &a
	fmt.Println("c的内存地址", c)
	fmt.Println("c1的内存地址", c1)
}

// 那么a,b是一个值变量,而c是指针变量,c1是引用变量.
// 如果&加在变量a前,c:=&a,表示取变量a的内存地址,c指向了a,它是一个指针变量.
// 当获取或设置指向的内存的值时,在指针变量前面加*,然后赋值如:*c=4,指针指向的变量a将会变化
// 如果将指针变量赋予另外一个变量:c1=c,name另外一个变量c1可以叫做引用变量,它存的值也是内存地址,内存地址指向的也是变量a,这时候,引用变量只是指针变量的拷贝,两个变量时互相独立的
// 值变量可以称为值类型,引用变量和指针变量都可以叫做引用类型
// 如何声明一个引用类型的变量,我们可以在数据类型前面加一个*表示.我们以后只会以值类型,和引用类型区分变量
